//=============================================================================
// Release information
// Design version: sifive_sesame_rel3_190711
// Document version: OMC-V1.4-UG-R2.11, OMC-V1.4-IG-R1.00-SESAME
// Release generated at Thu Jul 11 15:30:19 2019
//=============================================================================

package omc_secure_reg_pkg;
  parameter OFFS_BUILD_CONFIG = 'h1000;
  parameter OFFS_ACTION = 'h1004;
  parameter OFFS_AR_INT_STATUS = 'h1010;
  parameter OFFS_INT_CLEAR = 'h1014;
  parameter OFFS_AR_FAIL_ADDRESS_LOW = 'h1020;
  parameter OFFS_AR_FAIL_ADDRESS_HIGH = 'h1024;
  parameter OFFS_AR_FAIL_CONTROL = 'h1028;
  parameter OFFS_AR_FAIL_ID = 'h102c;
  parameter OFFS_AW_INT_STATUS = 'h1030;
  parameter OFFS_AW_FAIL_ADDRESS_LOW = 'h1040;
  parameter OFFS_AW_FAIL_ADDRESS_HIGH = 'h1044;
  parameter OFFS_AW_FAIL_CONTROL = 'h1048;
  parameter OFFS_AW_FAIL_ID = 'h104c;
  parameter OFFS_REGION_BASE_LOW_0 = 'h1100;
  parameter OFFS_REGION_BASE_HIGH_0 = 'h1104;
  parameter OFFS_REGION_TOP_LOW_0 = 'h1108;
  parameter OFFS_REGION_TOP_HIGH_0 = 'h110c;
  parameter OFFS_REGION_ATTRIBUTES_0 = 'h1110;
  parameter OFFS_REGION_ID_ACCESS_0 = 'h1114;
  parameter OFFS_REGION_BASE_LOW_1 = 'h1120;
  parameter OFFS_REGION_BASE_LOW_2 = 'h1140;
  parameter OFFS_REGION_BASE_LOW_3 = 'h1160;
  parameter OFFS_REGION_BASE_LOW_4 = 'h1180;
  parameter OFFS_REGION_BASE_LOW_5 = 'h11a0;
  parameter OFFS_REGION_BASE_LOW_6 = 'h11c0;
  parameter OFFS_REGION_BASE_LOW_7 = 'h11e0;
  parameter OFFS_REGION_BASE_LOW_8 = 'h1200;
  parameter OFFS_REGION_BASE_LOW_9 = 'h1220;
  parameter OFFS_REGION_BASE_LOW_10 = 'h1240;
  parameter OFFS_REGION_BASE_LOW_11 = 'h1260;
  parameter OFFS_REGION_BASE_LOW_12 = 'h1280;
  parameter OFFS_REGION_BASE_LOW_13 = 'h12a0;
  parameter OFFS_REGION_BASE_LOW_14 = 'h12c0;
  parameter OFFS_REGION_BASE_LOW_15 = 'h12e0;
  parameter OFFS_REGION_BASE_LOW_16 = 'h1300;
  parameter OFFS_REGION_BASE_HIGH_1 = 'h1124;
  parameter OFFS_REGION_BASE_HIGH_2 = 'h1144;
  parameter OFFS_REGION_BASE_HIGH_3 = 'h1164;
  parameter OFFS_REGION_BASE_HIGH_4 = 'h1184;
  parameter OFFS_REGION_BASE_HIGH_5 = 'h11a4;
  parameter OFFS_REGION_BASE_HIGH_6 = 'h11c4;
  parameter OFFS_REGION_BASE_HIGH_7 = 'h11e4;
  parameter OFFS_REGION_BASE_HIGH_8 = 'h1204;
  parameter OFFS_REGION_BASE_HIGH_9 = 'h1224;
  parameter OFFS_REGION_BASE_HIGH_10 = 'h1244;
  parameter OFFS_REGION_BASE_HIGH_11 = 'h1264;
  parameter OFFS_REGION_BASE_HIGH_12 = 'h1284;
  parameter OFFS_REGION_BASE_HIGH_13 = 'h12a4;
  parameter OFFS_REGION_BASE_HIGH_14 = 'h12c4;
  parameter OFFS_REGION_BASE_HIGH_15 = 'h12e4;
  parameter OFFS_REGION_BASE_HIGH_16 = 'h1304;
  parameter OFFS_REGION_TOP_LOW_1 = 'h1128;
  parameter OFFS_REGION_TOP_LOW_2 = 'h1148;
  parameter OFFS_REGION_TOP_LOW_3 = 'h1168;
  parameter OFFS_REGION_TOP_LOW_4 = 'h1188;
  parameter OFFS_REGION_TOP_LOW_5 = 'h11a8;
  parameter OFFS_REGION_TOP_LOW_6 = 'h11c8;
  parameter OFFS_REGION_TOP_LOW_7 = 'h11e8;
  parameter OFFS_REGION_TOP_LOW_8 = 'h1208;
  parameter OFFS_REGION_TOP_LOW_9 = 'h1228;
  parameter OFFS_REGION_TOP_LOW_10 = 'h1248;
  parameter OFFS_REGION_TOP_LOW_11 = 'h1268;
  parameter OFFS_REGION_TOP_LOW_12 = 'h1288;
  parameter OFFS_REGION_TOP_LOW_13 = 'h12a8;
  parameter OFFS_REGION_TOP_LOW_14 = 'h12c8;
  parameter OFFS_REGION_TOP_LOW_15 = 'h12e8;
  parameter OFFS_REGION_TOP_LOW_16 = 'h1308;
  parameter OFFS_REGION_TOP_HIGH_1 = 'h112c;
  parameter OFFS_REGION_TOP_HIGH_2 = 'h114c;
  parameter OFFS_REGION_TOP_HIGH_3 = 'h116c;
  parameter OFFS_REGION_TOP_HIGH_4 = 'h118c;
  parameter OFFS_REGION_TOP_HIGH_5 = 'h11ac;
  parameter OFFS_REGION_TOP_HIGH_6 = 'h11cc;
  parameter OFFS_REGION_TOP_HIGH_7 = 'h11ec;
  parameter OFFS_REGION_TOP_HIGH_8 = 'h120c;
  parameter OFFS_REGION_TOP_HIGH_9 = 'h122c;
  parameter OFFS_REGION_TOP_HIGH_10 = 'h124c;
  parameter OFFS_REGION_TOP_HIGH_11 = 'h126c;
  parameter OFFS_REGION_TOP_HIGH_12 = 'h128c;
  parameter OFFS_REGION_TOP_HIGH_13 = 'h12ac;
  parameter OFFS_REGION_TOP_HIGH_14 = 'h12cc;
  parameter OFFS_REGION_TOP_HIGH_15 = 'h12ec;
  parameter OFFS_REGION_TOP_HIGH_16 = 'h130c;
  parameter OFFS_REGION_ATTRIBUTES_1 = 'h1130;
  parameter OFFS_REGION_ATTRIBUTES_2 = 'h1150;
  parameter OFFS_REGION_ATTRIBUTES_3 = 'h1170;
  parameter OFFS_REGION_ATTRIBUTES_4 = 'h1190;
  parameter OFFS_REGION_ATTRIBUTES_5 = 'h11b0;
  parameter OFFS_REGION_ATTRIBUTES_6 = 'h11d0;
  parameter OFFS_REGION_ATTRIBUTES_7 = 'h11f0;
  parameter OFFS_REGION_ATTRIBUTES_8 = 'h1210;
  parameter OFFS_REGION_ATTRIBUTES_9 = 'h1230;
  parameter OFFS_REGION_ATTRIBUTES_10 = 'h1250;
  parameter OFFS_REGION_ATTRIBUTES_11 = 'h1270;
  parameter OFFS_REGION_ATTRIBUTES_12 = 'h1290;
  parameter OFFS_REGION_ATTRIBUTES_13 = 'h12b0;
  parameter OFFS_REGION_ATTRIBUTES_14 = 'h12d0;
  parameter OFFS_REGION_ATTRIBUTES_15 = 'h12f0;
  parameter OFFS_REGION_ATTRIBUTES_16 = 'h1310;
  parameter OFFS_REGION_ID_ACCESS_1 = 'h1134;
  parameter OFFS_REGION_ID_ACCESS_2 = 'h1154;
  parameter OFFS_REGION_ID_ACCESS_3 = 'h1174;
  parameter OFFS_REGION_ID_ACCESS_4 = 'h1194;
  parameter OFFS_REGION_ID_ACCESS_5 = 'h11b4;
  parameter OFFS_REGION_ID_ACCESS_6 = 'h11d4;
  parameter OFFS_REGION_ID_ACCESS_7 = 'h11f4;
  parameter OFFS_REGION_ID_ACCESS_8 = 'h1214;
  parameter OFFS_REGION_ID_ACCESS_9 = 'h1234;
  parameter OFFS_REGION_ID_ACCESS_10 = 'h1254;
  parameter OFFS_REGION_ID_ACCESS_11 = 'h1274;
  parameter OFFS_REGION_ID_ACCESS_12 = 'h1294;
  parameter OFFS_REGION_ID_ACCESS_13 = 'h12b4;
  parameter OFFS_REGION_ID_ACCESS_14 = 'h12d4;
  parameter OFFS_REGION_ID_ACCESS_15 = 'h12f4;
  parameter OFFS_REGION_ID_ACCESS_16 = 'h1314;
  parameter OFFS_CR_UPDATE_CTRL = 'h1700;
  parameter OFFS_DCG_ENABLE_PREPROC = 'h1704;
  parameter OFFS_INT_TEST_CTRL_PREPROC = 'h1708;
  parameter OFFS_SCR_CONFIG = 'h1800;
  parameter OFFS_SCR_ACTION = 'h1804;
  parameter OFFS_SCR_AR_INT_STATUS = 'h1810;
  parameter OFFS_SCR_INT_CLEAR = 'h1814;
  parameter OFFS_SCR_AR_FAIL_ADDRESS_LOW = 'h1820;
  parameter OFFS_SCR_AR_FAIL_ADDRESS_HIGH = 'h1824;
  parameter OFFS_SCR_AR_FAIL_ID = 'h182c;
  parameter OFFS_SCR_AW_INT_STATUS = 'h1830;
  parameter OFFS_SCR_AW_FAIL_ADDRESS_LOW = 'h1840;
  parameter OFFS_SCR_AW_FAIL_ADDRESS_HIGH = 'h1844;
  parameter OFFS_SCR_AW_FAIL_ID = 'h184c;
  parameter OFFS_SCR_REGION_BASE_LOW_0 = 'h1900;
  parameter OFFS_SCR_REGION_BASE_LOW_1 = 'h1920;
  parameter OFFS_SCR_REGION_BASE_LOW_2 = 'h1940;
  parameter OFFS_SCR_REGION_BASE_LOW_3 = 'h1960;
  parameter OFFS_SCR_REGION_BASE_LOW_4 = 'h1980;
  parameter OFFS_SCR_REGION_BASE_LOW_5 = 'h19a0;
  parameter OFFS_SCR_REGION_BASE_LOW_6 = 'h19c0;
  parameter OFFS_SCR_REGION_BASE_LOW_7 = 'h19e0;
  parameter OFFS_SCR_REGION_BASE_LOW_8 = 'h1a00;
  parameter OFFS_SCR_REGION_BASE_LOW_9 = 'h1a20;
  parameter OFFS_SCR_REGION_BASE_LOW_10 = 'h1a40;
  parameter OFFS_SCR_REGION_BASE_LOW_11 = 'h1a60;
  parameter OFFS_SCR_REGION_BASE_LOW_12 = 'h1a80;
  parameter OFFS_SCR_REGION_BASE_LOW_13 = 'h1aa0;
  parameter OFFS_SCR_REGION_BASE_LOW_14 = 'h1ac0;
  parameter OFFS_SCR_REGION_BASE_LOW_15 = 'h1ae0;
  parameter OFFS_SCR_REGION_BASE_HIGH_0 = 'h1904;
  parameter OFFS_SCR_REGION_BASE_HIGH_1 = 'h1924;
  parameter OFFS_SCR_REGION_BASE_HIGH_2 = 'h1944;
  parameter OFFS_SCR_REGION_BASE_HIGH_3 = 'h1964;
  parameter OFFS_SCR_REGION_BASE_HIGH_4 = 'h1984;
  parameter OFFS_SCR_REGION_BASE_HIGH_5 = 'h19a4;
  parameter OFFS_SCR_REGION_BASE_HIGH_6 = 'h19c4;
  parameter OFFS_SCR_REGION_BASE_HIGH_7 = 'h19e4;
  parameter OFFS_SCR_REGION_BASE_HIGH_8 = 'h1a04;
  parameter OFFS_SCR_REGION_BASE_HIGH_9 = 'h1a24;
  parameter OFFS_SCR_REGION_BASE_HIGH_10 = 'h1a44;
  parameter OFFS_SCR_REGION_BASE_HIGH_11 = 'h1a64;
  parameter OFFS_SCR_REGION_BASE_HIGH_12 = 'h1a84;
  parameter OFFS_SCR_REGION_BASE_HIGH_13 = 'h1aa4;
  parameter OFFS_SCR_REGION_BASE_HIGH_14 = 'h1ac4;
  parameter OFFS_SCR_REGION_BASE_HIGH_15 = 'h1ae4;
  parameter OFFS_SCR_REGION_TOP_LOW_0 = 'h1908;
  parameter OFFS_SCR_REGION_TOP_LOW_1 = 'h1928;
  parameter OFFS_SCR_REGION_TOP_LOW_2 = 'h1948;
  parameter OFFS_SCR_REGION_TOP_LOW_3 = 'h1968;
  parameter OFFS_SCR_REGION_TOP_LOW_4 = 'h1988;
  parameter OFFS_SCR_REGION_TOP_LOW_5 = 'h19a8;
  parameter OFFS_SCR_REGION_TOP_LOW_6 = 'h19c8;
  parameter OFFS_SCR_REGION_TOP_LOW_7 = 'h19e8;
  parameter OFFS_SCR_REGION_TOP_LOW_8 = 'h1a08;
  parameter OFFS_SCR_REGION_TOP_LOW_9 = 'h1a28;
  parameter OFFS_SCR_REGION_TOP_LOW_10 = 'h1a48;
  parameter OFFS_SCR_REGION_TOP_LOW_11 = 'h1a68;
  parameter OFFS_SCR_REGION_TOP_LOW_12 = 'h1a88;
  parameter OFFS_SCR_REGION_TOP_LOW_13 = 'h1aa8;
  parameter OFFS_SCR_REGION_TOP_LOW_14 = 'h1ac8;
  parameter OFFS_SCR_REGION_TOP_LOW_15 = 'h1ae8;
  parameter OFFS_SCR_REGION_TOP_HIGH_0 = 'h190c;
  parameter OFFS_SCR_REGION_TOP_HIGH_1 = 'h192c;
  parameter OFFS_SCR_REGION_TOP_HIGH_2 = 'h194c;
  parameter OFFS_SCR_REGION_TOP_HIGH_3 = 'h196c;
  parameter OFFS_SCR_REGION_TOP_HIGH_4 = 'h198c;
  parameter OFFS_SCR_REGION_TOP_HIGH_5 = 'h19ac;
  parameter OFFS_SCR_REGION_TOP_HIGH_6 = 'h19cc;
  parameter OFFS_SCR_REGION_TOP_HIGH_7 = 'h19ec;
  parameter OFFS_SCR_REGION_TOP_HIGH_8 = 'h1a0c;
  parameter OFFS_SCR_REGION_TOP_HIGH_9 = 'h1a2c;
  parameter OFFS_SCR_REGION_TOP_HIGH_10 = 'h1a4c;
  parameter OFFS_SCR_REGION_TOP_HIGH_11 = 'h1a6c;
  parameter OFFS_SCR_REGION_TOP_HIGH_12 = 'h1a8c;
  parameter OFFS_SCR_REGION_TOP_HIGH_13 = 'h1aac;
  parameter OFFS_SCR_REGION_TOP_HIGH_14 = 'h1acc;
  parameter OFFS_SCR_REGION_TOP_HIGH_15 = 'h1aec;
  parameter OFFS_SCR_REGION_ATTRIBUTES_0 = 'h1910;
  parameter OFFS_SCR_REGION_ATTRIBUTES_1 = 'h1930;
  parameter OFFS_SCR_REGION_ATTRIBUTES_2 = 'h1950;
  parameter OFFS_SCR_REGION_ATTRIBUTES_3 = 'h1970;
  parameter OFFS_SCR_REGION_ATTRIBUTES_4 = 'h1990;
  parameter OFFS_SCR_REGION_ATTRIBUTES_5 = 'h19b0;
  parameter OFFS_SCR_REGION_ATTRIBUTES_6 = 'h19d0;
  parameter OFFS_SCR_REGION_ATTRIBUTES_7 = 'h19f0;
  parameter OFFS_SCR_REGION_ATTRIBUTES_8 = 'h1a10;
  parameter OFFS_SCR_REGION_ATTRIBUTES_9 = 'h1a30;
  parameter OFFS_SCR_REGION_ATTRIBUTES_10 = 'h1a50;
  parameter OFFS_SCR_REGION_ATTRIBUTES_11 = 'h1a70;
  parameter OFFS_SCR_REGION_ATTRIBUTES_12 = 'h1a90;
  parameter OFFS_SCR_REGION_ATTRIBUTES_13 = 'h1ab0;
  parameter OFFS_SCR_REGION_ATTRIBUTES_14 = 'h1ad0;
  parameter OFFS_SCR_REGION_ATTRIBUTES_15 = 'h1af0;
  parameter OFFS_SCR_REGION_ID_ACCESS_0 = 'h1914;
  parameter OFFS_SCR_REGION_ID_ACCESS_1 = 'h1934;
  parameter OFFS_SCR_REGION_ID_ACCESS_2 = 'h1954;
  parameter OFFS_SCR_REGION_ID_ACCESS_3 = 'h1974;
  parameter OFFS_SCR_REGION_ID_ACCESS_4 = 'h1994;
  parameter OFFS_SCR_REGION_ID_ACCESS_5 = 'h19b4;
  parameter OFFS_SCR_REGION_ID_ACCESS_6 = 'h19d4;
  parameter OFFS_SCR_REGION_ID_ACCESS_7 = 'h19f4;
  parameter OFFS_SCR_REGION_ID_ACCESS_8 = 'h1a14;
  parameter OFFS_SCR_REGION_ID_ACCESS_9 = 'h1a34;
  parameter OFFS_SCR_REGION_ID_ACCESS_10 = 'h1a54;
  parameter OFFS_SCR_REGION_ID_ACCESS_11 = 'h1a74;
  parameter OFFS_SCR_REGION_ID_ACCESS_12 = 'h1a94;
  parameter OFFS_SCR_REGION_ID_ACCESS_13 = 'h1ab4;
  parameter OFFS_SCR_REGION_ID_ACCESS_14 = 'h1ad4;
  parameter OFFS_SCR_REGION_ID_ACCESS_15 = 'h1af4;
  parameter OFFS_ADDRESS_CTRL0 = 'h1f00;
  parameter OFFS_ADDRESS_CTRL1 = 'h1f04;
  parameter OFFS_REGION0_START = 'h1f10;
  parameter OFFS_REGION1_START = 'h1f20;
  parameter OFFS_REGION0_END = 'h1f14;
  parameter OFFS_REGION1_END = 'h1f24;
  parameter OFFS_REGION0_CFG = 'h1f18;
  parameter OFFS_REGION1_CFG = 'h1f28;
  parameter OFFS_CHIP0_SIZE = 'h1f30;
  parameter OFFS_CHIP1_SIZE = 'h1f34;
  parameter OFFS_CHIP2_SIZE = 'h1f38;
  parameter OFFS_CHIP3_SIZE = 'h1f3c;
  parameter OFFS_HASH_BITS = 'h1f40;
  parameter OFFS_TMRS_DATA = 'h1f50;
  parameter OFFS_TMRS_CTRL = 'h1f54;
  parameter OFFS_FSECC_CONFIG = 'h1f58;
  parameter OFFS_ECC_INT_ENABLE = 'h1f5c;
  parameter OFFS_ECC_INT_STATUS = 'h1f60;
  parameter OFFS_ECC_OVERRUN_INVALID = 'h1f64;
  parameter OFFS_ECC_OVERRUN_SEC = 'h1f68;
  parameter OFFS_ECC_OVERRUN_DED = 'h1f6c;
  parameter OFFS_ECC_INVALID_ADDR_LOW = 'h1f70;
  parameter OFFS_ECC_INVALID_ADDR_HIGH = 'h1f74;
  parameter OFFS_ECC_INVALID_ID = 'h1f7c;
  parameter OFFS_ECC_SEC_FAIL_ADDRESS0 = 'h1f80;
  parameter OFFS_ECC_SEC_FAIL_ADDRESS1 = 'h1f84;
  parameter OFFS_ECC_SEC_FAIL_ID = 'h1f8c;
  parameter OFFS_ECC_SEC_FAIL_INFO0 = 'h1f90;
  parameter OFFS_ECC_SEC_FAIL_INFO1 = 'h1f94;
  parameter OFFS_ECC_SEC_FAIL_INFO2 = 'h1f98;
  parameter OFFS_ECC_SEC_FAIL_INFO3 = 'h1f9c;
  parameter OFFS_ECC_DED_FAIL_ADDRESS0 = 'h1fa0;
  parameter OFFS_ECC_DED_FAIL_ADDRESS1 = 'h1fa4;
  parameter OFFS_ECC_DED_FAIL_ID = 'h1fa8;
  parameter OFFS_ECC_DED_FAIL_INFO = 'h1fac;
  parameter OFFS_ECC_SEC_CNT = 'h1fc0;
  parameter OFFS_ECC_SEC_CNT_OVER = 'h1fc4;
  parameter OFFS_ECC_SEC_CNT_START = 'h1fc8;
  parameter OFFS_ECC_SEC_CNT_STOP = 'h1fcc;
  parameter OFFS_FSECC_SEC_FAIL_INFO = 'h1fe4;
  parameter OFFS_FSECC_DED_FAIL_INFO = 'h1fe8;

  typedef struct packed {
    logic [5:0]reserved0; //[31:26]
    logic [1:0]no_of_filters; //[25:24]
    logic [9:0]reserved1; //[23:14]
    logic [5:0]address_width; //[13:8]
    logic reserved2; //[7:7]
    logic [6:0]no_of_regions; //[6:0]
  } build_config_t;

  typedef struct packed {
    logic [29:0]reserved0; //[31:2]
    logic [1:0]reaction_value; //[1:0]
  } action_t;

  typedef struct packed {
    logic [14:0]reserved0; //[31:17]
    logic overlap; //[16:16]
    logic [6:0]reserved1; //[15:9]
    logic overrun; //[8:8]
    logic [6:0]reserved2; //[7:1]
    logic status; //[0:0]
  } ar_int_status_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic clear; //[0:0]
  } int_clear_t;

  typedef struct packed {
    logic [31:0]addr_status_low; //[31:0]
  } ar_fail_address_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]addr_status_high; //[7:0]
  } ar_fail_address_high_t;

  typedef struct packed {
    logic [9:0]reserved0; //[31:22]
    logic non_secure; //[21:21]
    logic privileged; //[20:20]
    logic [19:0]reserved1; //[19:0]
  } ar_fail_control_t;

  typedef struct packed {
    logic [3:0]fail_vnet; //[31:28]
    logic [19:0]fail_aid; //[27:8]
    logic [7:0]fail_mid; //[7:0]
  } ar_fail_id_t;

  typedef struct packed {
    logic [14:0]reserved0; //[31:17]
    logic overlap; //[16:16]
    logic [6:0]reserved1; //[15:9]
    logic overrun; //[8:8]
    logic [6:0]reserved2; //[7:1]
    logic status; //[0:0]
  } aw_int_status_t;

  typedef struct packed {
    logic [31:0]addr_status_low; //[31:0]
  } aw_fail_address_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]addr_status_high; //[7:0]
  } aw_fail_address_high_t;

  typedef struct packed {
    logic [9:0]reserved0; //[31:22]
    logic non_secure; //[21:21]
    logic privileged; //[20:20]
    logic [19:0]reserved1; //[19:0]
  } aw_fail_control_t;

  typedef struct packed {
    logic [3:0]fail_vnet; //[31:28]
    logic [19:0]fail_aid; //[27:8]
    logic [7:0]fail_mid; //[7:0]
  } aw_fail_id_t;

  typedef struct packed {
    logic [19:0]base_address_low; //[31:12]
    logic [11:0]reserved0; //[11:0]
  } region_base_low_0_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]base_address_high; //[7:0]
  } region_base_high_0_t;

  typedef struct packed {
    logic [19:0]top_address_low; //[31:12]
    logic [11:0]dummy; //[11:0]
  } region_top_low_0_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]top_address_high; //[7:0]
  } region_top_high_0_t;

  typedef struct packed {
    logic s_wr_en; //[31:31]
    logic s_rd_en; //[30:30]
    logic [24:0]reserved0; //[29:5]
    logic ecc_op; //[4:4]
    logic [2:0]reserved1; //[3:1]
    logic filter_en; //[0:0]
  } region_attributes_0_t;

  typedef struct packed {
    logic [15:0]nsaid_wr_en; //[31:16]
    logic [15:0]nsaid_rd_en; //[15:0]
  } region_id_access_0_t;

  typedef struct packed {
    logic [19:0]base_address_low; //[31:12]
    logic [11:0]reserved0; //[11:0]
  } region_base_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]base_address_high; //[7:0]
  } region_base_high_t;

  typedef struct packed {
    logic [19:0]top_address_low; //[31:12]
    logic [11:0]dummy; //[11:0]
  } region_top_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]top_address_high; //[7:0]
  } region_top_high_t;

  typedef struct packed {
    logic s_wr_en; //[31:31]
    logic s_rd_en; //[30:30]
    logic [24:0]reserved0; //[29:5]
    logic ecc_op; //[4:4]
    logic [2:0]reserved1; //[3:1]
    logic filter_en; //[0:0]
  } region_attributes_t;

  typedef struct packed {
    logic [15:0]nsaid_wr_en; //[31:16]
    logic [15:0]nsaid_rd_en; //[15:0]
  } region_id_access_t;

  typedef struct packed {
    logic [29:0]reserved0; //[31:2]
    logic scr_cr_update; //[1:1]
    logic asp_cr_update; //[0:0]
  } cr_update_ctrl_t;

  typedef struct packed {
    logic [28:0]reserved0; //[31:3]
    logic scr_clk_gate_en; //[2:2]
    logic axi_clk_gate_en; //[1:1]
    logic apb_clk_gate_en; //[0:0]
  } dcg_enable_preproc_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [1:0]test_scr_int; //[29:28]
    logic [25:0]reserved1; //[27:2]
    logic [1:0]test_asp_int; //[1:0]
  } int_test_ctrl_preproc_t;

  typedef struct packed {
    logic scr_fwd_dis; //[31:31]
    logic [10:0]reserved0; //[30:20]
    logic [3:0]scr_no_of_round; //[19:16]
    logic [8:0]reserved1; //[15:7]
    logic [6:0]scr_no_of_regions; //[6:0]
  } scr_config_t;

  typedef struct packed {
    logic [29:0]reserved0; //[31:2]
    logic [1:0]scr_reaction_value; //[1:0]
  } scr_action_t;

  typedef struct packed {
    logic [14:0]reserved0; //[31:17]
    logic scr_overlap; //[16:16]
    logic [6:0]reserved1; //[15:9]
    logic scr_overrun; //[8:8]
    logic [6:0]reserved2; //[7:1]
    logic scr_status; //[0:0]
  } scr_ar_int_status_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic scr_clear; //[0:0]
  } scr_int_clear_t;

  typedef struct packed {
    logic [31:0]scr_addr_status_low; //[31:0]
  } scr_ar_fail_address_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]scr_addr_status_high; //[7:0]
  } scr_ar_fail_address_high_t;

  typedef struct packed {
    logic [27:0]reserved0; //[31:4]
    logic [3:0]scr_fail_id; //[3:0]
  } scr_ar_fail_id_t;

  typedef struct packed {
    logic [14:0]reserved0; //[31:17]
    logic scr_overlap; //[16:16]
    logic [6:0]reserved1; //[15:9]
    logic scr_overrun; //[8:8]
    logic [6:0]reserved2; //[7:1]
    logic scr_status; //[0:0]
  } scr_aw_int_status_t;

  typedef struct packed {
    logic [31:0]scr_addr_status_low; //[31:0]
  } scr_aw_fail_address_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]scr_addr_status_high; //[7:0]
  } scr_aw_fail_address_high_t;

  typedef struct packed {
    logic [27:0]reserved0; //[31:4]
    logic [3:0]scr_fail_id; //[3:0]
  } scr_aw_fail_id_t;

  typedef struct packed {
    logic [19:0]scr_base_address_low; //[31:12]
    logic [11:0]reserved0; //[11:0]
  } scr_region_base_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]scr_base_address_high; //[7:0]
  } scr_region_base_high_t;

  typedef struct packed {
    logic [19:0]scr_top_address_low; //[31:12]
    logic [11:0]dummy; //[11:0]
  } scr_region_top_low_t;

  typedef struct packed {
    logic [23:0]reserved0; //[31:8]
    logic [7:0]scr_top_address_high; //[7:0]
  } scr_region_top_high_t;

  typedef struct packed {
    logic aslr_en; //[31:31]
    logic scr_en; //[30:30]
    logic [28:0]reserved0; //[29:1]
    logic filter_en; //[0:0]
  } scr_region_attributes_t;

  typedef struct packed {
    logic [15:0]scrid_wr_en; //[31:16]
    logic [15:0]scrid_rd_en; //[15:0]
  } scr_region_id_access_t;

  typedef struct packed {
    logic [1:0]region_en; //[31:30]
    logic [15:0]reserved0; //[29:14]
    logic [1:0]num_of_bank; //[13:12]
    logic [3:0]reserved1; //[11:8]
    logic [3:0]num_of_chip; //[7:4]
    logic [3:0]reserved2; //[3:0]
  } address_ctrl0_t;

  typedef struct packed {
    logic [4:0]reserved0; //[31:27]
    logic [2:0]logical_page_size; //[26:24]
    logic rank_interleaving_disable; //[23:23]
    logic [20:0]reserved1; //[22:2]
    logic [1:0]interleaving_size; //[1:0]
  } address_ctrl1_t;

  typedef struct packed {
    logic [31:0]region_start; //[31:0]
  } region_start_t;

  typedef struct packed {
    logic [31:0]region_end; //[31:0]
  } region_end_t;

  typedef struct packed {
    logic [27:0]reserved0; //[31:4]
    logic [3:0]num_of_ch; //[3:0]
  } region_cfg_t;

  typedef struct packed {
    logic [7:0]chip_size; //[31:24]
    logic [9:0]reserved0; //[23:14]
    logic [1:0]chip_bg_width; //[13:12]
    logic [2:0]reserved1; //[11:9]
    logic chip_bank_width; //[8:8]
    logic [3:0]chip_row_width; //[7:4]
    logic [3:0]chip_col_width; //[3:0]
  } chip_size_t;

  typedef struct packed {
    logic [31:0]hash_bits; //[31:0]
  } hash_bits_t;

  typedef struct packed {
    logic [3:0]tmrs_cs; //[31:28]
    logic [11:0]ck_h_command; //[27:16]
    logic [3:0]reserved0; //[15:12]
    logic [11:0]ck_l_command; //[11:0]
  } tmrs_data_t;

  typedef struct packed {
    logic tmrs_done; //[31:31]
    logic [29:0]reserved0; //[30:1]
    logic tmrs_start; //[0:0]
  } tmrs_ctrl_t;

  typedef struct packed {
    logic [28:0]reserved0; //[31:3]
    logic [1:0]rmw_granule; //[2:1]
    logic fsecc_en; //[0:0]
  } fsecc_config_t;

  typedef struct packed {
    logic [12:0]reserved0; //[31:19]
    logic ecc_invalid_regionint_en; //[18:18]
    logic ecc_secint_en; //[17:17]
    logic ecc_dedint_en; //[16:16]
    logic [13:0]reserved1; //[15:2]
    logic [1:0]ecc_reaction; //[1:0]
  } ecc_int_enable_t;

  typedef struct packed {
    logic [11:0]reserved0; //[31:20]
    logic ecc_ar_invalid_region; //[19:19]
    logic ecc_aw_invalid_region; //[18:18]
    logic ecc_sec; //[17:17]
    logic ecc_ded; //[16:16]
    logic [15:0]reserved1; //[15:0]
  } ecc_int_status_t;

  typedef struct packed {
    logic [29:0]reserved0; //[31:2]
    logic ecc_ar_overrun_invalid_addr; //[1:1]
    logic ecc_aw_overrun_invalid_addr; //[0:0]
  } ecc_overrun_invalid_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic ecc_overrun_sec; //[0:0]
  } ecc_overrun_sec_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic ecc_overrun_ded; //[0:0]
  } ecc_overrun_ded_t;

  typedef struct packed {
    logic [31:0]ecc_invalid_addr_low; //[31:0]
  } ecc_invalid_addr_low_t;

  typedef struct packed {
    logic [27:0]reserved0; //[31:4]
    logic [3:0]ecc_invalid_addr_high; //[3:0]
  } ecc_invalid_addr_high_t;

  typedef struct packed {
    logic [3:0]reserved0; //[31:28]
    logic [19:0]ecc_invalid_aid; //[27:8]
    logic [7:0]ecc_invalid_mid; //[7:0]
  } ecc_invalid_id_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [1:0]ecc_rank_addr; //[29:28]
    logic [10:0]reserved1; //[27:17]
    logic [16:0]ecc_row_addr; //[16:0]
  } ecc_sec_fail_address0_t;

  typedef struct packed {
    logic [12:0]reserved0; //[31:19]
    logic [2:0]ecc_bank_addr; //[18:16]
    logic [15:0]ecc_col_addr; //[15:0]
  } ecc_sec_fail_address1_t;

  typedef struct packed {
    logic [3:0]reserved0; //[31:28]
    logic [19:0]ecc_fail_aid; //[27:8]
    logic [7:0]ecc_fail_mid; //[7:0]
  } ecc_sec_fail_id_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [3:0][1:0]ecc_result_b; //[29:4]
    logic [3:0][2:0]ecc_pos_b; //[26:0]
  } ecc_sec_fail_info0_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [7:4][1:0]ecc_result_b; //[29:4]
    logic [7:4][2:0]ecc_pos_b; //[26:0]
  } ecc_sec_fail_info1_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [11:8][1:0]ecc_result_b; //[29:4]
    logic [11:8][2:0]ecc_pos_b; //[26:0]
  } ecc_sec_fail_info2_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [15:12][1:0]ecc_result_b; //[29:4]
    logic [15:12][2:0]ecc_pos_b; //[26:0]
  } ecc_sec_fail_info3_t;

  typedef struct packed {
    logic [1:0]reserved0; //[31:30]
    logic [1:0]ecc_ded_rank_addr; //[29:28]
    logic [10:0]reserved1; //[27:17]
    logic [16:0]ecc_ded_row_addr; //[16:0]
  } ecc_ded_fail_address0_t;

  typedef struct packed {
    logic [12:0]reserved0; //[31:19]
    logic [2:0]ecc_ded_bank_addr; //[18:16]
    logic [15:0]ecc_ded_col_addr; //[15:0]
  } ecc_ded_fail_address1_t;

  typedef struct packed {
    logic [3:0]reserved0; //[31:28]
    logic [19:0]ecc_ded_fail_aid; //[27:8]
    logic [7:0]ecc_ded_fail_mid; //[7:0]
  } ecc_ded_fail_id_t;

  typedef struct packed {
    logic [15:0][1:0]ecc_ded_result_b; //[31:0]
  } ecc_ded_fail_info_t;

  typedef struct packed {
    logic [31:0]ecc_sec_cnt; //[31:0]
  } ecc_sec_cnt_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic ecc_sec_cnt_over; //[0:0]
  } ecc_sec_cnt_over_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic ecc_sec_cnt_start; //[0:0]
  } ecc_sec_cnt_start_t;

  typedef struct packed {
    logic [30:0]reserved0; //[31:1]
    logic ecc_sec_cnt_stop; //[0:0]
  } ecc_sec_cnt_stop_t;

  typedef struct packed {
    logic [3:0][1:0]fsecc_result_b; //[31:6]
    logic [3:0][5:0]fsecc_pos_b; //[29:0]
  } fsecc_sec_fail_info_t;

  typedef struct packed {
    logic [5:0]reserved0; //[31:26]
    logic [3:0][1:0]fsecc_ded_result_b; //[25:0]
  } fsecc_ded_fail_info_t;

endpackage
